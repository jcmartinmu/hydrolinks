}
match_data = nhd@data[as.numeric(as.character(matches$nearest_line_id)) + 1,]
match_data$MATCH_ID = sites$ids[not_na]
match_res[[i*pts + j]] = match_data
}
for(j in 1:nrow(pts)){
matches = snapPointsToLines(pts[j], nhd, maxDist = 100, idField = ids)
if(is.na(matches)){
match_res[i*pts + j] = NA
next()
}
match_data = nhd@data[as.numeric(as.character(matches$nearest_line_id)) + 1,]
match_data$MATCH_ID = sites$ids[not_na]
match_res[[i*pts + j]] = match_data
}
pts
nrow(pts@coords)
pts[j]
pts[j,]
pts@[1,]
pts[1,]
pts[1]
for(j in 1:nrow(pts@coords)){
matches = snapPointsToLines(pts[j], nhd, maxDist = 100, idField = ids)
if(is.na(matches)){
match_res[i*pts + j] = NA
next()
}
match_data = nhd@data[as.numeric(as.character(matches$nearest_line_id)) + 1,]
match_data$MATCH_ID = sites$ids[not_na]
match_res[[i*pts + j]] = match_data
}
j = 1
matches = snapPointsToLines(pts[j], nhd, maxDist = 100, idField = ids)
pts[j]
traceback()
source('C:/Users/tobi/nhdtools/R/link_streams.R')
source('C:/Users/tobi/nhdtools/R/link_streams.R')
matches = snapPointsToLines(pts[j], nhd, maxDist = 100, idField = ids)
if(is.na(matches)){
match_res[i*pts + j] = NA
next()
}
if(is.na(matches)){
match_res[i*nrow(pts@coords) + j] = NA
next()
}
if(is.na(matches)){
match_res[i*nrow(pts@coords) -nrow(pts@coords) + j] = NA
next()
}
for(j in 1:nrow(pts@coords)){
matches = snapPointsToLines(pts[j], nhd, maxDist = 100, idField = ids)
if(is.na(matches)){
match_res[i*nrow(pts@coords) -nrow(pts@coords) + j] = NA
next()
}
match_data = nhd@data[as.numeric(as.character(matches$nearest_line_id)) + 1,]
match_data$MATCH_ID = sites$ids[not_na]
match_res[[i*pts + j]] = match_data
}
}
traceback()
for(j in 1:nrow(pts@coords)){
matches = snapPointsToLines(pts[j], nhd, maxDist = 100, idField = ids)
if(is.na(matches)){
match_res[i*nrow(pts@coords) -nrow(pts@coords) + j] = NA
next()
}
match_data = nhd@data[as.numeric(as.character(matches$nearest_line_id)) + 1,]
match_data$MATCH_ID = sites$ids[not_na]
match_res[[i*nrow(pts@coords) - nrow(pts@coords) + j]] = match_data
}
sites$ids
not_na
sites$ids[not_na]
for(j in 1:nrow(pts@coords)){
matches = snapPointsToLines(pts[j], nhd, maxDist = 10, idField = ids)
if(is.na(matches)){
match_res[i*nrow(pts@coords) -nrow(pts@coords) + j] = NA
next()
}
match_data = nhd@data[as.numeric(as.character(matches$nearest_line_id)) + 1,]
match_data$MATCH_ID = sites$ids[not_na]
match_res[[i*nrow(pts@coords) - nrow(pts@coords) + j]] = match_data
}
pts[k]
pts[j]
matches = snapPointsToLines(pts[j], nhd, maxDist = 10, idField = ids)
if(is.na(matches)){
match_res[i*nrow(pts@coords) -nrow(pts@coords) + j] = NA
next()
}
match_data = nhd@data[as.numeric(as.character(matches$nearest_line_id)) + 1,]
matches
match_data
match_data$MATCH_ID = sites$ids[not_na]
match_data$MATCH_ID = sites$ids[j]
match_data
View(creeks)
match_res[[i*nrow(pts@coords) - nrow(pts@coords) + j]] = match_data
j = 1
for(j in 1:nrow(pts@coords)){
matches = snapPointsToLines(pts[j], nhd, maxDist = 10, idField = ids)
if(is.na(matches)){
match_res[i*nrow(pts@coords) -nrow(pts@coords) + j] = NA
next()
}
match_data = nhd@data[as.numeric(as.character(matches$nearest_line_id)) + 1,]
match_data$MATCH_ID = sites$ids[j]
match_res[[i*nrow(pts@coords) - nrow(pts@coords) + j]] = match_data
}
unique_matches = unique(do.call(rbind, match_res))
View(unique_matches)
source('C:/Users/tobi/nhdtools/R/link_streams.R')
library(readr)
creeks <- read_csv("~/PA Data/creeks.csv")
View(creeks)
lats = creeks$LATITUDE
rm lats
rm(lats)
library(nhdtools)
rm(link_streams())
rm(link_streams)
rm(snapPointsToLines())
rm(snapPointsToLines)
link_streams(creeks$LATITUDE, creeks$LONGITUDE, creeks$X1)
link = link_streams(creeks$LATITUDE, creeks$LONGITUDE, creeks$X1)
library(nhdtools)
link = link_streams(creeks$LATITUDE, creeks$LONGITUDE, creeks$X1)
View(link)
library(rgdal)
library(rgeos)
library(sp)
libary(maptools)
library(maptools)
lats = creeks$LATITUDE
lons = creeks$LONGITUDE
ids = creeks$X1
wbd_shapes = file.path(local_storage(), 'HU4', 'Shape_unzip', '*', 'Shape', 'NHDFlowline_projected.shp')
load(file=system.file('extdata/nhd_bb_streams_cache.Rdata', package='nhdtools'))
wbd_bb = bbdf
sites = data.frame(lats, lons, ids)
xy = cbind(sites$lons, sites$lats)
not_na = which(!is.na(sites$lats) & !is.na(sites$lons))
pts = SpatialPoints(xy[not_na, , drop=FALSE], proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
pts = spTransform(pts, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs"))
res   = list()
for(i in 1:nrow(pts@coords)){
res[[i]] = subset(wbd_bb, xmin <= pts@coords[i,1] & xmax >= pts@coords[i,1] & ymin <= pts@coords[i,2] & ymax >= pts@coords[i,2])
}
to_check = unique(do.call(rbind, res))
match_res = list()
nhd       = readOGR(to_check[i,'file'])
i = 1
nhd       = readOGR(to_check[i,'file'])
points = pts
lines = nhd
maxDist = 100
pointIds = ids
if (rgeosStatus()) {
if (!requireNamespace("rgeos", quietly = TRUE))
stop("package rgeos required for snapPointsToLines")
} else
stop("rgeos not installed")
if (class(points) == "SpatialPoints" && missing(withAttrs))
withAttrs = FALSE
if (!is.na(maxDist)) {
w = rgeos::gWithinDistance(points, lines, dist=maxDist, byid=TRUE)
validPoints = apply(w,2,any)
validLines = apply(w,1,any)
points = points[validPoints,]
lines =  lines[validLines,]
pointIds = pointIds[which(validPoints %in% points), ]
}
validPoints
str(validPoints)
str(validLines)
d = rgeos::gDistance(points, lines, byid=TRUE)
nearest_line_index = apply(d, 2, which.min) # Position of each nearest line in lines object
coordsLines = coordinates(lines)
coordsPoints = coordinates(points)
print(nrow(coordsPoints))
print(nrow(coordsLines))
coordsPoints
if(nrow(coordsPoints) == 0){
return(NA)
}
mNewCoords = vapply(1:length(points),
function(x)
nearestPointOnLine(coordsLines[[nearest_line_index[x]]][[1]],
coordsPoints[x,]), FUN.VALUE=c(0,0))
if (!is.na(idField)) nearest_line_id = lines@data[,idField][nearest_line_index]
nearest_line_id = lines@data[,idField][nearest_line_index]
nearest_line_id = sapply(slot(lines, "lines"), function(i) slot(i, "ID"))[nearest_line_index]
nearest_line_id
lines
maxDist = NA
validPoints
points
lines
source('C:/Users/tobi/nhdtools/R/link_streams.R')
snapPointsToLines(pts, nhd)
snapPointsToLines(pts, nhd, maxDist = 10)
source('C:/Users/tobi/nhdtools/R/link_streams.R')
snapPointsToLines(pts, nhd, maxDist = 10)
snapPointsToLines(pts, nhd, maxDist = 100)
maxDist = 10
if (!is.na(maxDist)) {
w = rgeos::gWithinDistance(points, lines, dist=maxDist, byid=TRUE)
validPoints = apply(w,2,any)
validLines = apply(w,1,any)
origPoints = points
points = points[validPoints,]
lines =  lines[validLines,]
pointIds = pointIds[points %in% origPoints, ]
}
w = rgeos::gWithinDistance(points, lines, dist=maxDist, byid=TRUE)
validPoints = apply(w,2,any)
validLines = apply(w,1,any)
origPoints = points
points = points[validPoints,]
points
origpoints
origPoints
points = pts
w = rgeos::gWithinDistance(points, lines, dist=maxDist, byid=TRUE)
validPoints = apply(w,2,any)
validLines = apply(w,1,any)
origPoints = points
points = points[validPoints,]
lines =  lines[validLines,]
origPoints
points@coords %in% origPoints@coords
which(points@coords %in% origPoints@coords)
pointIds[points@coords %in% origPoints@coords,]
pointIds[points@coords %in% origPoints@coords]
pointIds[points@coords %in% origPoints@coords]
pointIds[points@coords %in% origPoints@coords]
origPoints@coords %in% points@coords
pointIds[origPoints@coords %in% points@coords]
points
origPoints@coords %in% points@coords
which(origPoints@coords %in% points@coords)
points@coords
points
origPoints
pts@data = ids
pts = SpatialPointsDataFrame(xy[not_na, , drop=FALSE], proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
pts = SpatialPointsDataFrame(xy[not_na, , drop=FALSE], proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"), data=ids)
pts = SpatialPointsDataFrame(xy[not_na, , drop=FALSE], proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"), data=data.frame(ids))
data.frame(ids)
not_na
pts
sites = data.frame(lats, lons, ids)
xy = cbind(sites$lons, sites$lats)
not_na = which(!is.na(sites$lats) & !is.na(sites$lons))
pts = SpatialPointsDataFrame(xy[not_na, , drop=FALSE], proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"), data=data.frame(ids[not_na, drop=FALSE]))
pts
pts@data
pts = spTransform(pts, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs"))
pts@data
pts
res   = list()
for(i in 1:nrow(pts@coords)){
res[[i]] = subset(wbd_bb, xmin <= pts@coords[i,1] & xmax >= pts@coords[i,1] & ymin <= pts@coords[i,2] & ymax >= pts@coords[i,2])
}
to_check = unique(do.call(rbind, res))
match_res = list()
i = 1
nhd       = readOGR(to_check[i,'file'])
points = pts
lines = nhd
maxDist = 10
w = rgeos::gWithinDistance(points, lines, dist=maxDist, byid=TRUE)
validPoints = apply(w,2,any)
validLines = apply(w,1,any)
points = points[validPoints,]
lines =  lines[validLines,]
points
snapPointsToLines(pts, nhd, maxDist = 10)
pts = SpatialPointsDataFrame(xy[not_na, , drop=FALSE], proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"), data=data.frame(ids[not_na, ,drop=FALSE]))
pts = SpatialPointsDataFrame(xy[not_na, , drop=FALSE], proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"), data=data.frame(ids[not_na, drop=FALSE]))
pts
pts@data$ids.not_na..drop...FALSE.
library(dplyr)
rename(pts@data, MATCH_ID = ids.not_na..drop...FALSE.)
pts@data = rename(pts@data, MATCH_ID = ids.not_na..drop...FALSE.)
pts
library(readr)
creeks <- read_csv("~/PA Data/creeks.csv")
lats = creeks$LATITUDE
lons = creeks$LONGITUDE
ids = creeks$X1
wbd_shapes = file.path(local_storage(), 'HU4', 'Shape_unzip', '*', 'Shape', 'NHDFlowline_projected.shp')
load(file=system.file('extdata/nhd_bb_streams_cache.Rdata', package='nhdtools'))
wbd_bb = bbdf
sites = data.frame(lats, lons, ids)
xy = cbind(sites$lons, sites$lats)
not_na = which(!is.na(sites$lats) & !is.na(sites$lons))
pts = SpatialPointsDataFrame(xy[not_na, , drop=FALSE], proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"), data=data.frame(ids[not_na, drop=FALSE]))
pts@data = rename(pts@data, MATCH_ID = ids.not_na..drop...FALSE.)
pts = spTransform(pts, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs"))
res   = list()
for(i in 1:nrow(pts@coords)){
res[[i]] = subset(wbd_bb, xmin <= pts@coords[i,1] & xmax >= pts@coords[i,1] & ymin <= pts@coords[i,2] & ymax >= pts@coords[i,2])
}
to_check = unique(do.call(rbind, res))
match_res = list()
i = 1
nhd       = readOGR(to_check[i,'file'])
ids = rep(NA, length(sites$lats))
matches = snapPointsToLines(pts[j], nhd, maxDist = 10, idField = ids)
matches = snapPointsToLines(pts, nhd, maxDist = 10, idField = ids)
matches
for(j in 1:nrow(matches)){
match_data = nhd@data[as.numeric(as.character(matches$nearest_line_id[j])) + 1,]
match_data$MATCH_ID = matches$MATCH_ID[j]
match_res[i*nrow(matches) - nrow(matches) + j] = match_data
}
rm(match_res)
match_res = list()
for(j in 1:nrow(matches)){
match_data = nhd@data[as.numeric(as.character(matches$nearest_line_id[j])) + 1,]
match_data$MATCH_ID = matches$MATCH_ID[j]
match_res[i*nrow(matches) - nrow(matches) + j] = match_data
}
match_res[1]
match_res[2]
j = 1
match_data = nhd@data[as.numeric(as.character(matches$nearest_line_id[j])) + 1,]
match_data
match_data$MATCH_ID = matches$MATCH_ID[j]
match_data
i*nrow(matches) - nrow(matches) + j
match_res = list()
match_res[i*nrow(matches) - nrow(matches) + j]
match_res[[i*nrow(matches) - nrow(matches) + j]] = match_data
match_res
for(j in 1:nrow(matches)){
match_data = nhd@data[as.numeric(as.character(matches$nearest_line_id[j])) + 1,]
match_data$MATCH_ID = matches$MATCH_ID[j]
match_res[[i*nrow(matches) - nrow(matches) + j]] = match_data
}
match_res
unique_matches = unique(do.call(rbind, match_res))
library(readr)
creeks <- read_csv("~/PA Data/creeks.csv")
library(nhdtools)
link_2 = link_streams(creeks$LATITUDE, creeks$LONGITUDE, creeks$X1)
View(link_2)
library(nhdtools)
link_3 = link_streams(creeks$LATITUDE, creeks$LONGITUDE, creeks$X1)
View(link_3)
library(nhdtools)
library(nhdtools)
?write.csv
library(nhdtools)
library(nhdtools)
library(readr)
creek_sites <- read_csv("~/PA Data/creek_sites.csv")
View(creek_sites)
source('C:/Users/tobi/nhdtools/R/snapPointsToLines.R')
lats = creek_sites$LATITUDE
lons = creek_sites$LONGITUDE
ids = creek_sites$X1
max_dist = 100
wbd_shapes = file.path(local_storage(), 'HU4', 'Shape_unzip', '*', 'Shape', 'NHDFlowline_projected.shp')
load(file=system.file('extdata/nhd_bb_streams_cache.Rdata', package='nhdtools'))
wbd_bb = bbdf
sites = data.frame(lats, lons, ids)
xy = cbind(sites$lons, sites$lats)
not_na = which(!is.na(sites$lats) & !is.na(sites$lons))
pts = SpatialPointsDataFrame(xy[not_na, , drop=FALSE], proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"), data=data.frame(ids[not_na, drop=FALSE]))
pts@data = rename(pts@data, MATCH_ID = ids.not_na..drop...FALSE.)
library(rgdal)
library(rgeos)
library(sp)
library(maptools)
library(dplyr)
wbd_shapes = file.path(local_storage(), 'HU4', 'Shape_unzip', '*', 'Shape', 'NHDFlowline_projected.shp')
load(file=system.file('extdata/nhd_bb_streams_cache.Rdata', package='nhdtools'))
wbd_bb = bbdf
sites = data.frame(lats, lons, ids)
xy = cbind(sites$lons, sites$lats)
not_na = which(!is.na(sites$lats) & !is.na(sites$lons))
pts = SpatialPointsDataFrame(xy[not_na, , drop=FALSE], proj4string=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"), data=data.frame(ids[not_na, drop=FALSE]))
pts@data = rename(pts@data, MATCH_ID = ids.not_na..drop...FALSE.)
pts = spTransform(pts, CRS("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs"))
res   = list()
for(i in 1:nrow(pts@coords)){
res[[i]] = subset(wbd_bb, xmin <= pts@coords[i,1] & xmax >= pts@coords[i,1] & ymin <= pts@coords[i,2] & ymax >= pts@coords[i,2])
}
to_check = unique(do.call(rbind, res))
match_res = list()
i = 1
nhd       = readOGR(to_check[i,'file'])
ids = rep(NA, length(sites$lats))
bbox = wbd_bb[wbd_bb$file == to_check[i, 'file'], ]
pts = pts[bbox$xmin <= pts@coords[, 1] & bbox$xmax >= pts@coords[,1] & bbox$ymin <= pts@coords[,2] & bbox$ymax >= pts@coords[,2],]
matches = snapPointsToLines(pts, nhd, maxDist = max_dist, idField = ids)
nrow(matches)
matches_found = 0
?break
library(nhdtools)
rm(bbdf)
rm(bbox)
rm(sites)
rm(to_check)
rm(wbd_bb)
rm(xy)
rm(i)
rm(match_res)
rm(matches)
rm(matches_found)
rm(nhd)
rm(not_na)
rm(pts)
rm(res)
rm(wbd_shapes)
library(nhdtools)
rm(snapPointsToLines())
rm(snapPointsToLines)
library(nhdtools)
test = link_streams(lats, lons, ids)
library(rgeos)
library(rgdal)
hydrolakes_path = "C:\Users\tobi\Documents\lakes\hydrolakes\HydroLAKES_polys_v10_shp"
hydrolakes = readOGR(hydrolakes_path)
hydrolakes_path = "C:/Users/tobi/Documents/lakes/hydrolakes/HydroLAKES_polys_v10_shp"
hydrolakes = readOGR(file.path(hydrolakes_path, "HydroLAKES_polys_v10.shp"))
centroids = gCentroid(hydrolakes, byid = TRUE)
i = 1
centroids[c((28000 * (i-1) + 1):(28000*i)),]
?order
centroids = centroids[,order("x")]
centroids = centroids[order("x")]
centroids
centroids = gCentroid(hydrolakes, byid = TRUE)
centroids = centroids[order(centroids$x)]
centroids
centroids[c((28000 * (i-1) + 1):(28000*i)),]
centroids[c(1:10),]
hydrolakes[centroids[c(1:10),],]
rownames(centroids[c(1:10),])
rownames(centroids)
rownames(centroids@coords)
centroids@coords[c((28000 * (i-1) + 1):(28000*i)),]
rownames(centroids@coords[c((28000 * (i-1) + 1):(28000*i)),])
hydrolakes[rownames(centroids@coords[1])]
hydrolakes[rownames(centroids@coords[1,])]
rownames(centroids@coords)
hydrolakes[rownames(centroids@coords[1,]),]
hydrolakes[rownames(centroids@coords[2\,]),]
hydrolakes[rownames(centroids@coords[2,]),]
hydrolakes[rownames(centroids@coords[3,]),]
hydrolakes[rownames(centroids@coords[5,]),]
hydrolakes[rownames(centroids@coords[5]),]
hydrolakes[rownames(centroids@coords[5,]),]
hydrolakes[rownames(centroids@coords[c(1:10),]),]
slice = hydrolakes[rownames(centroids@coords[c((28000 * (i-1) + 1):(28000*i)),]),]
slice()
slice
slice@data
?writeOGR
writeOGR(slice, dsn = hydrolakes_path, layer = paste("hydrolakes_" + i), driver = "ESRI Shapefile")
writeOGR(slice, dsn = hydrolakes_path, layer = paste("hydrolakes_" + as.character(i)), driver = "ESRI Shapefile")
writeOGR(slice, dsn = hydrolakes_path, layer = paste("hydrolakes_", i), driver = "ESRI Shapefile")
writeOGR(slice, dsn = hydrolakes_path, layer = paste0("hydrolakes_", i), driver = "ESRI Shapefile")
slice@bbox
dir.create(file.path(hydrolakes_path, paste0("hydrolakes_", i)))
writeOGR(slice, dsn = file.path(hydrolakes_path, paste0("hydrolakes_", i)), layer = "HydroLAKES_polys_v10",
driver = "ESRI Shapefile")
bbdf[i,2:3] = slice@bbox[1,]
bbdf = data.frame(file=character(), xmin=numeric(), xmax=numeric(), ymin=numeric(), ymax=numeric(), stringsAsFactors = FALSE)
bbdf[i,2:3] = slice@bbox[1,]
bbdf[i,4:5] = slice@bbox[2,]
bbdf[i,1] = file.path(hydrolakes_path, paste0("hydrolakes_", i), "HydroLAKES_polys_v10.shp")
View(bbdf)
for(i in c(2:49)){
slice = hydrolakes[rownames(centroids@coords[c((28000 * (i-1) + 1):(28000*i)),]),]
dir.create(file.path(hydrolakes_path, paste0("hydrolakes_", i)))
writeOGR(slice, dsn = file.path(hydrolakes_path, paste0("hydrolakes_", i)), layer = "HydroLAKES_polys_v10",
driver = "ESRI Shapefile")
bbdf[i,2:3] = slice@bbox[1,]
bbdf[i,4:5] = slice@bbox[2,]
bbdf[i,1] = file.path(hydrolakes_path, paste0("hydrolakes_", i), "HydroLAKES_polys_v10.shp")
}
i = 50
if(i < 50){
slice = hydrolakes[rownames(centroids@coords[c((28000 * (i-1) + 1):(28000*i)),]),]
}
else{
slice = hydrolakes[rownames(centroids@coords[c(1372001:1427688),]),]
}
dir.create(file.path(hydrolakes_path, paste0("hydrolakes_", i)))
writeOGR(slice, dsn = file.path(hydrolakes_path, paste0("hydrolakes_", i)), layer = "HydroLAKES_polys_v10",
driver = "ESRI Shapefile")
bbdf[i,2:3] = slice@bbox[1,]
bbdf[i,4:5] = slice@bbox[2,]
bbdf[i,1] = file.path(hydrolakes_path, paste0("hydrolakes_", i), "HydroLAKES_polys_v10.shp")
slice = hydrolakes[rownames(centroids@coords[c(1372001:1427688),]),]
slice = hydrolakes[rownames(centroids@coords[c(1372001:1427688),]),]
dir.create(file.path(hydrolakes_path, paste0("hydrolakes_", i)))
writeOGR(slice, dsn = file.path(hydrolakes_path, paste0("hydrolakes_", i)), layer = "HydroLAKES_polys_v10",
driver = "ESRI Shapefile")
writeOGR(slice, dsn = file.path(hydrolakes_path, paste0("hydrolakes_", i)), layer = "HydroLAKES_polys_v10",
driver = "ESRI Shapefile")
bbdf[i,2:3] = slice@bbox[1,]
bbdf[i,4:5] = slice@bbox[2,]
bbdf[i,1] = file.path(hydrolakes_path, paste0("hydrolakes_", i), "HydroLAKES_polys_v10.shp")
View(bbdf)
